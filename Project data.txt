import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city = input('From what city do you want the information, Chicago, New York City or Washington: ').lower()
    while city != 'chicago' and city != 'new york city' and city != 'washington':
        print('That\'s not a valid input!')
        city = input('From what city do you want the information, Chicago, New York City or Washington: ')        
     
    # TO DO: get user input for month (all, january, february, ... , june)
    months = ['january', 'february', 'march', 'april', 'may', 'june', 'all']
    month = str(input('Of what month do you want the data (january, february, march, april, may, june or all): '))
    
    if month not in months:
      print('That\'s not a valid input!')
      month = str(input('Of what month do you want the data (january, february, march, april, may, june or all): '))
    


    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    day_list = ['all', 'sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']
    week_day = int(input('Name the day of the week you want the data from (use numbers, where all = 0 and sunday = 1): '))
    while week_day > 7 or week_day < 0:
        print('That\'s not a valid input!')
        week_day = int(input('Name the day of the week you want the data from (use numbers, where all = 0 and sunday = 1): '))
    else:
        day = day_list[week_day]
    
    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])

    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name


    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
    
        # filter by month to create the new dataframe
        df = df[df['month'] == month]

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    populair_month = df['month'].mode()[0]

    print('Most populair month: ',populair_month)

    # TO DO: display the most common day of week
    populair_day = df['day_of_week'].mode()[0]
    print('Most populair day: ',populair_day)

    # TO DO: display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    populair_hour = df['hour'].mode()[0]
    print('Most populair hour: ',populair_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    populair_start_station = df['Start Station'].mode()[0]
    print('Most populair Start Station: ',populair_start_station)

    # TO DO: display most commonly used end station
    populair_end_station = df['End Station'].mode()[0]
    print('Most populair End Station: ',populair_end_station)

    # TO DO: display most frequent combination of start station and end station trip
    df['combination'] = df['Start Station'] + ' and ' + df['End Station']
    populair_combination = df['combination'].mode()[0]
    print('Most populair combination Start Station and End Station: ',populair_combination)
    
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    total_travel_time = df['Trip Duration'].sum()
    print('Total travel time in minutes is: ',total_travel_time)

    # TO DO: display mean travel time
    mean_travel_time = df['Trip Duration'].mean()
    print('Mean travel time in minutes is: ',mean_travel_time)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    count_user_type = df['User Type'].value_counts()
    print(count_user_type)

    # TO DO: Display counts of gender
    count_gender =  df['Gender'].value_counts()
    print(count_gender)


    # TO DO: Display earliest, most recent, and most common year of birth
    #df['Birth Year'] = df['Birth Year'].astype(float)
    
    min_birth_year = df['Birth Year'].min()
    max_birth_year = df['Birth Year'].max()
    common_birth_year = df['Birth Year'].mode()
    
    print('Earliest birth year is: ', int(min_birth_year))
    print('Most recent birth year is: ', int(max_birth_year))
    print('Most common birth year is: ', int(common_birth_year))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
